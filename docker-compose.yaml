services:
  mongo1:
    image: ${MONGO_IMG_NAME}
    container_name: mongo1
    ports:
      - "27017:27017"
    command: mongod --replSet mongo-replica-set --bind_ip localhost,mongo1
    volumes:
      - mongo1_data:/data/db
    networks:
      - mongo-cluster
      - backend-network

  mongo2:
    image: ${MONGO_IMG_NAME}
    container_name: mongo2
    ports:
      - "27018:27017"
    command: mongod --replSet mongo-replica-set --bind_ip localhost,mongo2
    volumes:
      - mongo2_data:/data/db
    networks:
      - mongo-cluster

  mongo3:
    image: ${MONGO_IMG_NAME}
    container_name: mongo3
    ports:
      - "27019:27017"
    command: mongod --replSet mongo-replica-set --bind_ip localhost,mongo3
    volumes:
      - mongo3_data:/data/db
    networks:
      - mongo-cluster

  mongo-init:
    image: ${MONGO_IMG_NAME}
    container_name: mongo-init
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    environment:
      MONGO_DB_PASSWORD: /run/secrets/mongo_password
    command: >
      /bin/bash -c "
        echo 'Waiting for MongoDB replicas to start...';
        sleep 10;
        mongosh --host mongo1 --eval '
          function sleep(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
          }
          async function initReplicaSet() {
            rs.initiate({
              _id: \"mongo-replica-set\",
              members: [
                {_id: 0, host: \"mongo1:27017\"},
                {_id: 1, host: \"mongo2:27017\"},
                {_id: 2, host: \"mongo3:27017\"}
              ]
            });
            while(true) {
              const status = rs.status();
              if (status.ok == 1) break;
              await sleep(1000);
            }
            console.log(JSON.stringify(rs.status(), null, 2));
          }
          async function createUser() {
            const db = db.getSiblingDB('admin');
            const pwd = JSON.parse(JSON.stringify(process.env.MONGO_DB_PASSWORD));
            await db.createUser({
              user: \"admin\",
              pwd: pwd,
              mechanisms: [\"SCRAM-SHA-1\"],
              roles: [
                { role: \"root\", db: \"admin\" },
                { role: \"clusterAdmin\", db: \"admin\" },
                { role: \"dbOwner\", db: \"admin\" },
                { role: \"readWriteAnyDatabase\", db: \"admin\"}
              ]
            });
            console.log('User admin was created');
          }
          async function createDBandCollection() {
            const db = db.getSiblingDB('image_predictions');
            await db.createCollection('prediction_results');
            console.log('Database and collection created');
          }
          await initReplicaSet();
          await createUser();
          await createDBandCollection();
        ' && touch /init_done/success;
      "
    volumes:
      - init_done:/init_done
    networks:
      - mongo-cluster
    secrets:
      - mongo_password

  yolo5:
    image: ${YOLO5_IMG_NAME}
    container_name: ${YOLO5_NAME}
    depends_on:
      - mongo-init
    ports:
      - 8081:8081
    environment:
      BUCKET_NAME: ${BUCKET_NAME}
      BUCKET_PREFIX: ${BUCKET_PREFIX}
      MONGO_DB_PASSWORD: /run/secrets/mongo_password
    command: >
      /bin/bash -c "
        while [ ! -f /init_done/success ]; do
          echo 'Waiting for mongo-init to complete...';
          sleep 1;
        done;
        echo 'Starting YOLO5 application...';
        python3 app.py
      "
    networks:
      - backend-network
    secrets:
      - mongo_password

  polybot:
    image: ${POLYBOT_IMG_NAME}
    container_name: ${POLYBOT_NAME}
    depends_on:
      - yolo5
    ports:
      - 8443:8443
    environment:
      AWS_PROFILE:
      TELEGRAM_TOKEN: /run/secrets/telegram_token
      TELEGRAM_APP_URL: ${TELEGRAM_APP_URL}
      BUCKET_NAME: ${BUCKET_NAME}
      BUCKET_PREFIX: ${BUCKET_PREFIX}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8443"]
      interval: 30s
      timeout: 10s
      retries: 3
    secrets:
      - telegram_token

secrets:
   telegram_token:
     file: telegram_bot_token.secret
   mongo_password:
     file: mongo_db_password.secret

volumes:
  mongo1_data:
  mongo2_data:
  mongo3_data:
  init_done:

networks:
  mongo-cluster:
    name: mongo-cluster
  backend-network:
    name: backend-network
