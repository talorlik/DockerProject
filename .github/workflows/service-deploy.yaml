name: Polybot Service Deployment

on:
  push:
    branches:
      - main

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      ec2_ip: ${{ steps.set_ip.outputs.ec2_ip }}
    steps:
      - name: Fetch EC2 Public IP
        id: set_ip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'us-east-1'
        run: |
          IP=$(aws ec2 describe-instances --instance-ids i-0598dd777bcbfdf21 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
          if [ $? -eq 0 ]; then
            echo "ec2_ip=$IP" >> $GITHUB_OUTPUT
          else
            echo "AWS CLI command failed:"
            echo $IP
            exit 1
          fi

  MongoInitBuild:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo code
        uses: actions/checkout@v2

      - name: Build and push image
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'us-east-1'
        run: |
          cd mongo

          # Login to ECR (commend in in case you use ECR, change region code and ECR URI):
          aws ecr get-login-password --region ${{ env.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin 019273956931.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com

          # Define the base name of the image and the tag separately
          IMAGE_BASE_NAME=mongo-init
          IMAGE_TAG=${{ github.run_number }}

          # Build the image
          docker build -t ${IMAGE_BASE_NAME}:${IMAGE_TAG} .

          # Tag the image for ECR
          docker tag ${IMAGE_BASE_NAME}:${IMAGE_TAG} 019273956931.dkr.ecr.us-east-1.amazonaws.com/talo-docker-images:${IMAGE_BASE_NAME}-${IMAGE_TAG}

          # Push the image to ECR
          docker push 019273956931.dkr.ecr.us-east-1.amazonaws.com/talo-docker-images:${IMAGE_BASE_NAME}-${IMAGE_TAG}

  PolybotBuild:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo code
        uses: actions/checkout@v2

      - name: Build and push image
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'us-east-1'
        run: |
          cd polybot

          # Login to ECR (commend in in case you use ECR, change region code and ECR URI):
          aws ecr get-login-password --region ${{ env.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin 019273956931.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com

          # Define the base name of the image and the tag separately
          IMAGE_BASE_NAME=polybot
          IMAGE_TAG=${{ github.run_number }}

          # Build the image
          docker build -t ${IMAGE_BASE_NAME}:${IMAGE_TAG} .

          # Tag the image for ECR
          docker tag ${IMAGE_BASE_NAME}:${IMAGE_TAG} 019273956931.dkr.ecr.us-east-1.amazonaws.com/talo-docker-images:${IMAGE_BASE_NAME}-${IMAGE_TAG}

          # Push the image to ECR
          docker push 019273956931.dkr.ecr.us-east-1.amazonaws.com/talo-docker-images:${IMAGE_BASE_NAME}-${IMAGE_TAG}

  Yolo5Build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo code
        uses: actions/checkout@v2

      - name: Build and push image
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'us-east-1'
        run: |
          cd yolo5

          # Login to ECR (commend in in case you use ECR, change region code and ECR URI):
          aws ecr get-login-password --region ${{ env.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin 019273956931.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com

          # Define the base name of the image and the tag separately
          IMAGE_BASE_NAME=yolo5
          IMAGE_TAG=${{ github.run_number }}

          # Build the image
          docker build -t ${IMAGE_BASE_NAME}:${IMAGE_TAG} .

          # Tag the image for ECR
          docker tag ${IMAGE_BASE_NAME}:${IMAGE_TAG} 019273956931.dkr.ecr.us-east-1.amazonaws.com/talo-docker-images:${IMAGE_BASE_NAME}-${IMAGE_TAG}

          # Push the image to ECR
          docker push 019273956931.dkr.ecr.us-east-1.amazonaws.com/talo-docker-images:${IMAGE_BASE_NAME}-${IMAGE_TAG}

  Deploy:
    name: Deploy Docker compose project
    runs-on: ubuntu-latest
    needs:
      - setup
      - MongoInitBuild
      - PolybotBuild
      - Yolo5Build
    env:
      EC2_PUBLIC_IP: ${{ needs.setup.outputs.ec2_ip }}
    steps:
      - name: Checkout the repo code
        uses: actions/checkout@v2

      - name: Copy Compose files to the EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          source: |
            docker-compose.yaml,
            start-ngrok.sh
          target: PolybotService/

      - name: Update the Docker Compose project in the EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            # Check if jq is installed
            if ! command -v jq &> /dev/null; then
              sudo apt-get update && sudo apt-get install jq -y
            fi

            cd PolybotService/

            chmod +x start-ngrok.sh

            # Save telegram bot token in a secret file, to be used in docker-compose.yaml
            echo "${{ secrets.TELEGRAM_BOT_TOKEN }}" > telegram_bot_token.secret

            # Save mongoDB in a secret file, to be used in docker-compose.yaml
            echo "${{ secrets.MONGO_DB_PASSWORD }}" > mongo_db_password.secret

            # Generate .env file
            echo """
            POLYBOT_IMG_NAME=019273956931.dkr.ecr.us-east-1.amazonaws.com/talo-docker-images:polybot-${{ github.run_number }}
            POLYBOT_NAME=polybot
            POLYBOT_PORT=8443
            YOLO5_IMG_NAME=019273956931.dkr.ecr.us-east-1.amazonaws.com/talo-docker-images:yolo5-${{ github.run_number }}
            YOLO5_NAME=yolo5
            YOLO5_PORT=8081
            MONGO_IMG_NAME=mongo:5
            MONGO_INIT_IMG_NAME=019273956931.dkr.ecr.us-east-1.amazonaws.com/talo-docker-images:mongo-init-${{ github.run_number }}
            TELEGRAM_APP_URL=https://immense-assuring-ghoul.ngrok-free.app
            BUCKET_NAME=talo-s3
            BUCKET_PREFIX=images
            """ > .env

            # Stop ngrok processes
            sudo supervisorctl reread
            sudo supervisorctl update
            sudo supervisorctl stop ngrok

            # Take the service down
            docker compose down

            # Clean volumns as docker compose doesn't
            yes y | docker volume prune
            docker volume rm polybotservice_init_done
            docker volume rm polybotservice_mongo1_data
            docker volume rm polybotservice_mongo2_data
            docker volume rm polybotservice_mongo3_data

            $(aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 019273956931.dkr.ecr.us-east-1.amazonaws.com)

            # Take it up with the current updated values
            docker compose up -d

            ./start-ngrok.sh
